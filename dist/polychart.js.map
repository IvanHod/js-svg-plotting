{"version":3,"sources":["tools/colorgenerator.js","tools/svg.js","tools/queries.js","axis/axis.js","axis/xaxis.js","axis/yaxis.js","chartmain.js","chartnav.js","polychart.js"],"names":["ColorGenerator","defaultColors","currentIndex","createText","props","shape","document","createElementNS","prop","setAttributeNS","appendChild","createTextNode","createSvgElement","type","createPolyline","group","append","animate","createTransform","from","to","fill","getMaxOfArray","numArray","Math","max","apply","getMinOfArray","min","query","el","appendToElement","element","styles","key","createElement","name","setAttribute","getElementById","getElementsByClassName","getElementsByTagName","Axis","svg","data","width","height","color","fontSize","paddingBottom","format","detectLetterWidth","x1","y1","x2","y2","lettersWidth","text","x","y","heightOfLetter","getBBox","widthOfLetter","remove","g","val","currentElement","dateText","parentNode","insertBefore","nextSibling","monthNames","daysOfWeek","moment","time","date","Date","res","indexOf","replace","getDay","getMonth","day","getDate","XAxis","level","left_offset","right_offset","draw","index","pixel","start_index","end_index","length","minVal","maxVal","percentile","round","getTimestampByPixel","timestamp","min_index","max_index","datesPixelsDict","i","getDateByIndex","getPixelByTimestamp","calcDatesAndPixels","widthOfWord","startPos","lastPos","numberWords","ceil","padding","getDateByPixel","appendLabel","axis","points","getAttributeNS","split","slice","delta","parseFloat","leftWidth","rightWidth","labels","childNodes","forEach","textElement","currentPixel","getMovingCoordinate","leftOffset","rightOffset","updateOpacity","firstX","secondX","thirdX","distance","opacity","appendNextLevel","prevLabels","n","j","currentEndPos","nextStartPos","newStartPos","innerHTML","elem","isTransform","isStart","transform","YAxis","id","visible","dataLength","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","startIndex","endIndex","isChange","invertPixel","value","detectMinMax","numberOfLabels","drawHorizontalLine","getValue","textNodes","pos","ChartMain","columns","offsetWidth","minIndex","maxIndex","minX","maxX","colorGenerator","formData","addEventListener","mouseMoving","bind","mouseOver","mouseLeave","xaxis","yaxis","drawLines","createHelpWindow","helpingGroup","line","helpingBlock","dataInfo","detail","colors","innerText","names","circle","stroke","e","offsetX","getIndexByTimestamp","querySelector","classList","circleY","getPixelByValue","circleX","add","relatedTarget","contains","types","getNextColor","prevMin","isFinite","prevMax","yn","xn","polyline","Y","newPoints","transform_date","transform_value","animateElem","beginElement","drawLine","redraw","lineId","isVisible","ChartNavigation","minValue","maxValue","blackout","borderDiv","left_index","right_index","offsetLeft","left_border_dragging","right_border_dragging","window_is_moving","borderDivWidth","getComputedStyle","getPropertyValue","initEvents","eventLeftBorderWasMoved","eventRightBorderWasMoved","eventWindowWasMoved","chart","blackoutDiv","rect","target","srcElement","getBoundingClientRect","clientX","left","parentBorderLeft","touches","pageX","move","child","offsetRight","border","style","borderLeftWidth","leftBorderWasMoved","frameWidth","borderRightWidth","rightBorderWasMoved","maxWidth","borderWindowWidth","borderLeft","distanceToRightBorder","borderRight","windowWasMoved","obj","func","startPixel","endPixel","startTimestamp","startPercentile","endPercentile","endTimestamp","minY","maxY","toDraw","navigator","updateLine","Polychart","mainBlock","navigationBlock","navigation","eventsCheckboxWasChanged","onLeftBorderWasMoved","moveLeft","onRightBorderWasMoved","moveRight","onWindowWasMoved","moveWindow","createLabels","onCheckboxWasChanged","changeVisible","switchDiv","switchBtn","toggle","parentDiv","roundDiv","input","checked","_class","push"],"mappings":"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","file":"polychart.js","sourceRoot":"../src","sourcesContent":["export class ColorGenerator {\n    constructor() {\n        this.defaultColors = ['green', 'red', 'blue', 'orange', 'yellow'];\n        this.currentIndex = 0;\n    }\n\n    getNextColor() {\n        this.currentIndex += 1;\n        return this.defaultColors[this.currentIndex - 1];\n    }\n}","export function createText(props) {\n    let shape = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    for (let prop in props) {\n        if (prop !== 'val') {\n            shape.setAttributeNS(null, prop, props[prop]);\n        }\n    }\n    shape.appendChild(document.createTextNode(props['val']));\n    return shape\n}\n\nexport function createSvgElement(type, props) {\n    let shape = document.createElementNS('http://www.w3.org/2000/svg', type);\n    for (let prop in props) {\n        shape.setAttributeNS(null, prop, props[prop]);\n    }\n    return shape\n}\n\nexport function createPolyline(group, props) {\n    if (!group) {\n        group = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    }\n    let shape = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');\n\n    for (let prop in props) {\n        shape.setAttributeNS(null, prop, props[prop]);\n    }\n\n    group.append(shape);\n\n    let animate = createTransform('points', '0', '0');\n    shape.append(animate);\n\n    return shape\n}\n\nexport function createTransform(type, from, to, fill='freeze') {\n    let animate = document.createElementNS('http://www.w3.org/2000/svg', 'animate');\n    animate.setAttributeNS(null, 'attributeName', type);\n\n    animate.setAttributeNS(null, 'from', from);\n    animate.setAttributeNS(null, 'to', to);\n    animate.setAttributeNS(null, 'fill', fill);\n\n    animate.setAttributeNS(null, 'begin', 'indefinite');\n    animate.setAttributeNS(null, 'dur', '200ms');\n    return animate\n}","export function getMaxOfArray(numArray) {\n    return Math.max.apply(null, numArray);\n}\n\nexport function getMinOfArray(numArray) {\n    return Math.min.apply(null, numArray);\n}\n\nexport function query(el, props, appendToElement) {\n    let element = null;\n    if (props) {\n        let styles = '';\n        element = document.createElement(el);\n        for (let key in props) {\n            if (key === 'css') {\n                for (let name in props[key]) {\n                    styles += name + ':' + props[key][name] + ';';\n                }\n            } else {\n                element.setAttribute(key, props[key]);\n            }\n        }\n        if (styles) {\n            element.setAttribute('style', styles);\n        }\n    } else {\n        if (el[0] === '#') {\n            element = document.getElementById(el);\n        } else if (el[0] === '.') {\n            element = document.getElementsByClassName(el);\n        } else {\n            element = document.getElementsByTagName(el);\n        }\n    }\n    if (appendToElement) {\n        appendToElement.append(element);\n    }\n    return element;\n}","import {createSvgElement, createText} from \"../tools/svg\";\n\nexport class Axis {\n    constructor(svg, data, width, height, color='gray', fontSize='18px') {\n        this.svg = svg;\n        this.data = data;\n        this.width = width;\n        this.height = height;\n        this.fontSize = fontSize;\n        this.paddingBottom = 40;\n        this.color = color;\n        this.format = '';\n\n        this.detectLetterWidth();\n    }\n\n    drawHorizontalLine(x1, y1, x2, y2) {\n        let shape = createSvgElement('line', {\n            'x1': x1,\n            'y1': y1,\n            'x2': x2,\n            'y2': y2,\n            'fill': 'none', 'stroke': this.color, 'stroke-width': '1'});\n        this.svg.append(shape);\n    }\n\n    detectLetterWidth() {\n        this.lettersWidth = {};\n        let text = createText({x: 0, y: 0, 'val': 'J', 'font-size': this.fontSize, 'color': 'black'});\n        this.svg.append(text);\n        this.heightOfLetter = text.getBBox().height;\n        this.widthOfLetter = text.getBBox().width;\n        text.remove();\n    }\n\n    appendLabel(x, y, g, val, props, currentElement=null) {\n        let dateText = createText({x: x, y: y, 'val': val, 'font-size': this.fontSize, 'fill': this.color});\n        for (let prop in props) {\n            dateText.setAttributeNS(null, prop, props[prop]);\n        }\n        if (!currentElement) {\n            g.append(dateText);\n        } else {\n            currentElement.parentNode.insertBefore(dateText, currentElement.nextSibling);\n        }\n        return dateText\n    }\n}","import {createSvgElement} from \"../tools/svg\";\nimport {Axis} from \"./axis\";\n\nlet monthNames = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n];\nlet daysOfWeek = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nfunction moment(time, format) {\n    let date = new Date(time), res = format;\n    if (format.indexOf('DDD') > -1) {\n        res = res.replace('DDD', daysOfWeek[date.getDay()]);\n    }\n    if (format.indexOf('MMM') > -1) {\n        res = res.replace('MMM', monthNames[date.getMonth()]);\n    }\n    if (format.indexOf('DD') > -1) {\n        let day = date.getDate();\n        res = res.replace('DD', day > 9 ? day : ('0' + day));\n    }\n    return res;\n}\n\nexport class XAxis extends Axis {\n    constructor(svg, x, width, height, color='gray') {\n        super(svg, x, width, height, color);\n\n        this.format = 'MMM DD';\n        this.level = 1;\n        this.left_offset = 0;\n        this.right_offset = 0;\n\n        this.g = createSvgElement('g', {'class': 'xaxis'});\n        this.svg.append(this.g);\n\n        this.draw();\n    }\n\n    getDateByIndex(index) {\n        return moment(this.data[index], this.format);\n    }\n\n    getTimestampByPixel(pixel, start_index = 0, end_index = -1) {\n        if (end_index === -1) {\n            end_index = this.data.length - 1\n        }\n        let minVal = this.data[start_index], maxVal = this.data[end_index];\n\n        let percentile = (pixel - 0) / (this.width - 0);\n\n        return Math.round(minVal + (maxVal - minVal) * percentile);\n    }\n\n    getDateByPixel(pixel, start_index = 0, end_index = -1) {\n        let timestamp = this.getTimestampByPixel(pixel, start_index, end_index);\n\n        return moment(timestamp, this.format);\n    }\n\n    getPixelByTimestamp(timestamp, start_index = 0, end_index = -1) {\n        if (end_index === -1) {\n            end_index = this.data.length - 1\n        }\n        let minVal = this.data[start_index], maxVal = this.data[end_index];\n        let percentile = (timestamp - minVal) / (maxVal - minVal);\n        return this.width * percentile;\n    }\n\n    calcDatesAndPixels(min_index, max_index) {\n        let datesPixelsDict = {};\n        for (let i = 0; i < this.data.length; i++) {\n            datesPixelsDict[this.getDateByIndex(i, min_index, max_index)] = this.getPixelByTimestamp(this.data[i], min_index, max_index);\n        }\n        this.datesPixelsDict = datesPixelsDict;\n    }\n\n    draw(min_index, max_index) {\n        this.calcDatesAndPixels(min_index, max_index);\n        let widthOfWord = this.widthOfLetter * this.format.length;\n        let startPos = widthOfWord / 4;\n        let lastPos = this.width - startPos;\n\n        let numberWords = Math.ceil(((lastPos - startPos) / widthOfWord) / 2);\n        let padding = (lastPos - startPos - widthOfWord * numberWords) / (numberWords - 1);\n\n        let y = this.height - 3;\n        for (let i = 0; i < numberWords; i++) {\n            let date = this.getDateByPixel(startPos + widthOfWord / 2);\n            this.appendLabel(startPos, y, this.g, date, {'class': 'level-0'});\n            startPos += widthOfWord + padding;\n        }\n    }\n\n    static getMovingCoordinate(elem, isTransform=true, isStart=true) {\n        let x = parseFloat(elem.getAttributeNS(null, 'x'));\n        let transform = elem.getAttributeNS(null, 'transform');\n        let width = isStart === true ? 0 : elem.getBBox().width;\n\n        if (transform) {\n            transform = parseFloat(transform.replace('translate(', '').replace(')', ''))\n        }\n        return x + (isTransform && transform ? transform : 0) + width;\n    }\n\n    redraw(start_index, end_index) {\n        let axis = this, padding = this.widthOfLetter * this.format.length;\n\n        let points = this.svg.getElementsByTagName('polyline')[0]\n            .getAttributeNS(null, 'points').split(' ').slice(0, 2);\n\n        let delta = parseFloat(points[1].split(',')[0]) - parseFloat(points[0].split(',')[0]);\n        let leftWidth = delta * end_index;\n        let rightWidth = delta * (this.data.length - 1 - start_index);\n\n        let labels = this.g.childNodes;\n        labels.forEach(function (textElement) {\n            let currentPixel = axis.width - XAxis.getMovingCoordinate(textElement, false);\n            let leftOffset = currentPixel - ((currentPixel * leftWidth) / (axis.width));\n\n            currentPixel = XAxis.getMovingCoordinate(textElement, false);\n            let rightOffset = currentPixel - (currentPixel * rightWidth) / axis.width;\n\n            textElement.setAttributeNS(null, 'transform', 'translate(' + (leftOffset - rightOffset) + ')');\n        });\n\n        this.updateOpacity(labels);\n    }\n\n    updateOpacity(labels) {\n        let firstX = XAxis.getMovingCoordinate(labels[0], true, false),\n            secondX = XAxis.getMovingCoordinate(labels[1], true),\n            thirdX = XAxis.getMovingCoordinate(labels[2], true);\n        let distance = XAxis.getMovingCoordinate(labels[0], false, false) - XAxis.getMovingCoordinate(labels[0], false, true);\n\n        let opacity = (((thirdX - firstX) / distance) - 1) * 4;\n        if (opacity > 2 && ((secondX - firstX) / distance) >= 1) {\n            this.appendNextLevel(0);\n            this.level += 1;\n        } else if (opacity < 0) {\n            let labels = this.g.getElementsByClassName('level-' + (this.level - 1));\n            let n = labels.length;\n            for (let i = n - 1; i >= 0; i--) {\n                labels[i].remove();\n            }\n            this.level -= 1;\n        } else if (opacity > 0) {\n            let labels = this.g.getElementsByClassName('level-' + (this.level - 1));\n            for (let i = 0; i < labels.length; i++) {\n                labels[i].setAttributeNS(null, 'opacity', opacity);\n            }\n        }\n\n    }\n\n    appendNextLevel(opacity) {\n        let widthOfWord = this.widthOfLetter * this.format.length, height = this.height - 3;\n        let labels = this.g.getElementsByClassName('level-' + this.level);\n        if (!labels.length) {\n            let prevLabels = this.g.getElementsByTagName('text');\n            let n = prevLabels.length - 1;\n            for (let i = 0; i < n; i++) {\n                let j = i * 2;\n                let currentEndPos = XAxis.getMovingCoordinate(prevLabels[j], false, false);\n                let nextStartPos = XAxis.getMovingCoordinate(prevLabels[j + 1], false, true);\n\n                let newStartPos = currentEndPos + (nextStartPos - currentEndPos - widthOfWord) / 2;\n                let date = this.getDateByPixel(newStartPos + (widthOfWord / 2));\n\n                let text = this.appendLabel(newStartPos, height, this.g, date, {\n                    'class': 'level-' + this.level,\n                    'opacity': opacity\n                }, prevLabels[i * 2]);\n\n                newStartPos = currentEndPos + (nextStartPos - currentEndPos - text.getBBox().width) / 2;\n                text.setAttributeNS(null, 'x', newStartPos);\n                text.innerHTML = this.getDateByPixel(newStartPos + (text.getBBox().width / 2));\n            }\n        }\n    }\n}","import {getMinOfArray, getMaxOfArray} from \"../tools/queries\";\nimport {Axis} from \"./axis\";\nimport {createSvgElement} from \"../tools/svg\";\n\nexport class YAxis extends Axis {\n    constructor(svg, y, width, height, color='gray') {\n        super(svg, y, width, height, color);\n\n        this.visible = {};\n        for (let id in y) {\n            this.dataLength = y[id].length;\n            this.visible[id] = true;\n        }\n        this.min = Number.POSITIVE_INFINITY;\n        this.max = Number.NEGATIVE_INFINITY;\n\n        this.draw();\n    }\n\n    detectMinMax(startIndex=0, endIndex=-1) {\n        if (endIndex) {\n            endIndex = this.dataLength - 1;\n        }\n        let min = this.min, max = this.max;\n        for (let id in this.data) {\n            if (this.visible[id]) {\n                let data = this.data[id].slice(startIndex, endIndex);\n                min = Math.min(min, getMinOfArray(data));\n                max = Math.max(max, getMaxOfArray(data));\n            }\n        }\n        let isChange = min !== this.min && max !== this.max;\n        this.min = min;\n        this.max = max;\n        return isChange\n    }\n\n    getValue(pixel) {\n        let invertPixel = this.height - this.paddingBottom - pixel;\n        let percentile = invertPixel / (this.height - this.paddingBottom);\n        return Math.round(this.min + (this.max - this.min) * percentile);\n    }\n\n\n    getPixelByValue(value, min, max) {\n        let height = this.height - this.paddingBottom;\n        let percentile = (value - min) / (max - min);\n        return height - height * percentile;\n    }\n\n    draw() {\n        this.detectMinMax();\n        let height = this.height - this.paddingBottom / 2;\n        let numberOfLabels = 5;\n        let padding = (height - numberOfLabels * this.heightOfLetter) / (numberOfLabels - 1);\n        let startPos = height;\n\n        this.group = createSvgElement('g');\n        this.svg.append(this.group);\n\n        for (let i = 0; i < numberOfLabels; i++) {\n            this.drawHorizontalLine(0, startPos, this.width, startPos);\n            this.appendLabel(10, startPos - 10, this.group, this.getValue(startPos));\n            startPos -= this.heightOfLetter + padding;\n        }\n    }\n\n    redraw(min, max) {\n        if (this.min !== min || this.max !== max) {\n            this.min = min;\n            this.max = max;\n            let textNodes = this.group.getElementsByTagName('text');\n            for (let i = 0; i < textNodes.length; i++) {\n                let pos = parseFloat(textNodes[i].getAttributeNS(null, 'y'));\n                textNodes[i].innerHTML = this.getValue(pos);\n            }\n        }\n    }\n}","import {ColorGenerator} from \"./tools/colorgenerator\";\nimport {createPolyline, createSvgElement, createTransform} from \"./tools/svg\";\nimport {getMaxOfArray, getMinOfArray, query} from \"./tools/queries\";\nimport {XAxis} from \"./axis/xaxis\";\nimport {YAxis} from \"./axis/yaxis\";\n\nexport class ChartMain {\n    constructor(el, data) {\n        this.el = el;\n        this.x = data.columns[0].slice(1);\n        this.width = el.offsetWidth;\n        this.height = this.width / 2;\n        this.format = 'MMM DD';\n        this.paddingBottom = 40;\n        this.minIndex = 0;\n        this.maxIndex = this.x.length - 1;\n        this.min = Number.POSITIVE_INFINITY;\n        this.max = Number.NEGATIVE_INFINITY;\n\n        this.minX = this.x[0];\n        this.maxX = this.x[this.x.length - 1];\n\n        this.colorGenerator = new ColorGenerator();\n        this.formData(data);\n\n        this.svg = createSvgElement('svg', {'viewBox': '0 0 ' + this.width + ' ' + this.height, 'class': 'chart-svg'});\n        el.append(this.svg);\n\n        this.g = createSvgElement('g', {'class': 'plot-lines'});\n        this.svg.append(this.g);\n\n        this.svg.addEventListener('mousemove', this.mouseMoving.bind(this));\n        this.svg.addEventListener('mouseover', this.mouseOver.bind(this));\n        this.svg.addEventListener('mouseleave', this.mouseLeave.bind(this));\n\n        this.xaxis = new XAxis(this.svg, data.columns[0].slice(1), this.width, this.height);\n        this.yaxis = new YAxis(this.svg, this.data, this.width, this.height);\n\n        this.drawLines(0, null, true);\n\n        this.createHelpWindow(data);\n    }\n\n    createHelpWindow(data) {\n        this.helpingGroup = createSvgElement('g',{'class': 'helping-group invisible'});\n        this.svg.append(this.helpingGroup);\n        let line = createSvgElement('line', {\n            'class': 'vertical-line',\n            'x1': 0, 'y1': this.height - this.paddingBottom / 2,\n            'x2': 0, 'y2': 0,\n            'fill': 'none', 'stroke': 'gray', 'stroke-width': '1'});\n        this.helpingGroup.append(line);\n\n        let helpingBlock = query('div', {'class': 'helping-block hide'}, this.el);\n        query('div', {'class': 'helping-date'}, helpingBlock);\n\n        let dataInfo = query('div', {'class': 'helping-data-info-block'}, helpingBlock);\n\n        for (let id in this.data) {\n            let detail = query('div', {\n                'id': 'helping-detail-' + id,\n                'class': 'helping-detail',\n                'css': {\n                    'color': this.colors[id],\n                }\n            }, dataInfo);\n            query('div', {'class': 'helping-detail-number'}, detail);\n            query('div', {'class': 'helping-detail-name'}, detail).innerText = data.names[id];\n\n            let circle = createSvgElement('circle', {\n                'cx': 0, 'cy': 0, 'r': 3,\n                'class': 'circle-label-' + id,\n                stroke: this.colors[id], 'stroke-width': '2', 'fill': 'white'});\n            this.helpingGroup.append(circle);\n        }\n        this.helpingBlock = helpingBlock;\n    }\n\n    mouseMoving(e) {\n        let pixel = e.offsetX;\n        let index = this.getIndexByTimestamp(this.xaxis.getTimestampByPixel(pixel, this.minIndex, this.maxIndex));\n        this.helpingBlock.getElementsByClassName('helping-date')[0].innerHTML = this.xaxis.getDateByIndex(index);\n\n        for (let id in this.data) {\n            let detail = this.helpingBlock.querySelector('#helping-detail-' + id);\n            let circle = this.helpingGroup.getElementsByClassName('circle-label-' + id)[0];\n            if (this.visible[id]) {\n                detail.classList.remove('hide');\n                circle.classList.remove('invisible');\n\n                let value = this.data[id][index];\n                detail.getElementsByClassName('helping-detail-number')[0].innerHTML = value;\n\n                let circleY = this.yaxis.getPixelByValue(value, this.min, this.max);\n                let circleX = this.xaxis.getPixelByTimestamp(this.x[index], this.minIndex, this.maxIndex);\n\n                circle.setAttributeNS(null, 'cx', circleX);\n                circle.setAttributeNS(null, 'cy', circleY);\n            } else {\n                detail.classList.add('hide');\n                circle.classList.add('invisible');\n            }\n        }\n\n        let line = this.helpingGroup.getElementsByTagName('line')[0];\n        line.setAttributeNS(null, 'x1', pixel);\n        line.setAttributeNS(null, 'x2', pixel);\n    }\n\n    mouseOver() {\n        this.el.getElementsByClassName('helping-block')[0].classList.remove('hide');\n        this.helpingGroup.classList.remove('invisible')\n    }\n\n    mouseLeave(e) {\n        if (e.relatedTarget && !e.relatedTarget.classList.contains('helping-block')) {\n            this.el.getElementsByClassName('helping-block')[0].classList.add('hide');\n            this.helpingGroup.classList.add('invisible');\n        }\n    }\n\n    formData(data) {\n        this.data = {};\n        this.visible = {};\n        this.colors = data.colors;\n\n        for (let i = 0; i < data.columns.length; i++) {\n            let id = data.columns[i][0];\n            if (data.types[id] === 'line') {\n                this.data[id] = data.columns[i].slice(1);\n                this.visible[id] = true;\n                if (!this.colors[id]) {\n                    this.colors[id] = this.colorGenerator.getNextColor();\n                }\n            }\n        }\n    }\n\n    detectMinMax() {\n        let min = Number.POSITIVE_INFINITY, max = Number.NEGATIVE_INFINITY;\n        for (let id in this.data) {\n            if (this.visible[id]) {\n                let data = this.data[id].slice(this.minIndex, this.maxIndex);\n                min = Math.min(min, getMinOfArray(data));\n                max = Math.max(max, getMaxOfArray(data));\n            }\n        }\n        let isChange = min !== this.min && max !== this.max;\n        this.prevMin = Number.isFinite(this.min) ? this.min : min;\n        this.min = min;\n        this.prevMax = Number.isFinite(this.max) ? this.max : max;\n        this.max = max;\n        return isChange\n    }\n\n    getIndexByTimestamp(timestamp) {\n        let index = 0;\n        while (timestamp > this.x[index]) {\n            index += 1;\n        }\n        if (timestamp - this.x[index - 1] < this.x[index] - timestamp) {\n            index -= 1;\n        }\n        return index;\n    }\n\n    transform_value(yn, min=null, max=null) {\n        if (!min) {\n            min = this.min;\n            max = this.max;\n        }\n        let height = this.height - this.paddingBottom;\n        return height - ((yn - min) / (max - min)) * height\n    }\n\n    transform_date(xn) {\n        return ((xn - this.minX) / (this.maxX - this.minX)) * this.width\n    }\n\n    drawLine(id, start_index=0, end_index=null, animate=false) {\n        let polyline = this.g.querySelector('#chart-line-' + id);\n\n        if (polyline && !this.visible[id]) {\n            polyline.remove();\n        }\n\n        if (this.visible[id]) {\n            let Y = this.data[id], points = '', newPoints = '';\n            for (let i = start_index; i <= end_index; i++) {\n                let x = this.transform_date(this.x[i]);\n                points += x + ',' + this.transform_value(Y[i], this.prevMin, this.prevMax) + ' ';\n                newPoints += x + ',' + this.transform_value(Y[i]) + ' ';\n            }\n\n            if (!polyline) {\n                createPolyline(this.g, {\n                    'points': newPoints,\n                    'fill': 'none',\n                    'id': 'chart-line-' + id,\n                    'stroke-width': '2', 'stroke': this.colors[id]});\n            } else {\n                if (!animate) {\n                    let animateElem = polyline.childNodes[0];\n                    if (animateElem) {\n                        animateElem.remove();\n                    }\n                    polyline.setAttributeNS(null, 'points', newPoints);\n                } else {\n                    polyline.setAttributeNS(null, 'points', points);\n\n                    let animateElem = createTransform('points', points, newPoints);\n                    polyline.append(animateElem);\n                    animateElem.beginElement();\n                }\n            }\n        }\n    }\n\n    drawLines(start_index=0, end_index=null, animate=false) {\n        if (!end_index) {\n            end_index = this.x.length - 1;\n        }\n\n        this.minIndex = start_index;\n        this.maxIndex = end_index;\n\n        this.detectMinMax();\n\n        this.minX = this.x[start_index];\n        this.maxX = this.x[end_index];\n\n        for (let id in this.data) {\n            this.drawLine(id, start_index, end_index, animate);\n        }\n    }\n\n    moveLeft(start_index, end_index) {\n        this.drawLines(start_index, end_index);\n\n        this.xaxis.redraw(start_index, end_index);\n        this.yaxis.redraw(this.min, this.max);\n    }\n\n    moveRight(start_index, end_index) {\n        this.drawLines(start_index, end_index);\n\n        this.xaxis.redraw(start_index, end_index);\n        this.yaxis.redraw(this.min, this.max);\n    }\n\n    moveWindow(start_index, end_index) {\n        this.drawLines(start_index, end_index);\n\n        this.xaxis.redraw(start_index, end_index);\n        this.yaxis.redraw(this.min, this.max);\n    }\n\n    changeVisible(lineId, isVisible) {\n        this.visible[lineId] = isVisible;\n\n        this.drawLines(this.minIndex, this.maxIndex, true);\n\n        this.yaxis.redraw(this.min, this.max);\n    }\n}","import {ColorGenerator} from './tools/colorgenerator';\nimport {createSvgElement, createPolyline} from './tools/svg'\nimport {getMaxOfArray, getMinOfArray, query} from \"./tools/queries\";\n\nexport class ChartNavigation {\n    constructor(el, x, data, minValue, maxValue) {\n        let blackout = query('div', {'class': 'navigation-blackout'}, el);\n        let borderDiv = query('div', {'class': 'navigation-border'}, blackout);\n\n        this.el = el;\n        this.x = x;\n        this.minValue = minValue;\n        this.maxValue = maxValue;\n        this.left_index = 0;\n        this.right_index = x.length - 1;\n        this.width = el.offsetWidth;\n        this.height = 90;\n        this.offsetX = el.parentNode.offsetLeft;\n        this.left_border_dragging = false;\n        this.right_border_dragging = false;\n        this.window_is_moving = false;\n        this.colorGenerator = new ColorGenerator();\n        this.borderDivWidth = parseFloat(getComputedStyle(borderDiv,null).getPropertyValue('border-left-width'));\n        this.initEvents();\n\n        let svg = createSvgElement('svg', {'viewBox': '0 0 ' + this.width + ' ' + this.height, 'class': 'navigation'});\n        el.append(svg);\n\n        this.g = createSvgElement('g', {'class': 'plot-navigation-lines'});\n        svg.append(this.g);\n\n        this.drawLines(data);\n\n        this.eventLeftBorderWasMoved = [];\n        this.eventRightBorderWasMoved = [];\n        this.eventWindowWasMoved = [];\n    }\n\n    initEvents() {\n        let chart = this, blackoutDiv = this.el.getElementsByClassName('navigation-blackout')[0];\n\n        blackoutDiv.addEventListener('mousedown', function (e) {\n            let width = blackoutDiv.childNodes[0].offsetWidth - chart.borderDivWidth * 2;\n\n            let target = e.target || e.srcElement,\n                rect = target.getBoundingClientRect(),\n                offsetX = e.clientX - rect.left;\n\n            if (offsetX <= chart.borderDivWidth) {\n                chart.left_border_dragging = true;\n            } else if (offsetX > width) {\n                chart.right_border_dragging = true;\n            } else if (offsetX > 0 && offsetX < width) {\n                chart.window_is_moving = offsetX - chart.borderDivWidth;\n            }\n        });\n\n        blackoutDiv.addEventListener('mouseup', function (e) {\n            chart.left_border_dragging = false;\n            chart.right_border_dragging = false;\n            chart.window_is_moving = false;\n        });\n\n        blackoutDiv.addEventListener('touchstart', function (e) {\n            let parentBorderLeft = parseFloat(getComputedStyle(this.parentNode, null).getPropertyValue('border-left-width'));\n            let offsetX = e.touches[0].pageX - chart.offsetX - chart.borderDivWidth - parentBorderLeft;\n            let width = blackoutDiv.childNodes[0].offsetWidth - chart.borderDivWidth * 2;\n\n            if (offsetX <= 0) {\n                chart.left_border_dragging = true;\n            } else if (offsetX > width) {\n                chart.right_border_dragging = true;\n            } else if (offsetX > 0 && offsetX < width) {\n                chart.window_is_moving = offsetX;\n            }\n        });\n\n        blackoutDiv.addEventListener('touchend', function (e) {\n            chart.left_border_dragging = false;\n            chart.right_border_dragging = false;\n            chart.window_is_moving = false;\n        });\n\n        blackoutDiv.addEventListener('mousemove', function (e) {\n            chart.move(e, this);\n        });\n\n        blackoutDiv.addEventListener('touchmove', function (e) {\n            chart.move(e.touches[0], this);\n        })\n    }\n\n    move(e, el) {\n        let chart = this, child = el.childNodes[0];\n        let offsetLeft = parseFloat(getComputedStyle(el, null).getPropertyValue('border-left-width'));\n        let offsetRight = parseFloat(getComputedStyle(el, null).getPropertyValue('border-right-width'));\n        let border = this.borderDivWidth;\n\n        let offsetX = e.pageX - 8;\n\n        if (chart.left_border_dragging && offsetX >= border / 2 && offsetX < chart.width - border * 1.5) {\n            child.style.width = (chart.width - e.pageX + 8 - border * 1.5 - offsetRight) + 'px';\n            el.style.borderLeftWidth = (offsetX - border / 2) + 'px';\n            el.style.width = (chart.width - e.pageX + 8 + border / 2 - offsetRight) + 'px';\n\n            chart.leftBorderWasMoved(offsetX - border / 2);\n        }\n        else if (chart.right_border_dragging && offsetX <= chart.width - border / 2) {\n            let frameWidth = e.pageX - border * 1.5 - offsetLeft - 8;\n            child.style.width = frameWidth + 'px';\n            el.style.width = (frameWidth + border * 2) + 'px';\n            el.style.borderRightWidth = (chart.width - frameWidth - offsetLeft - border * 2) + 'px';\n\n            chart.rightBorderWasMoved(offsetX + border / 2);\n        } else if (chart.window_is_moving) {\n            let maxWidth = chart.width - (el.offsetWidth - offsetLeft - offsetRight);\n            let borderWindowWidth = child.offsetWidth - border * 2;\n\n            let borderLeft = Math.min(maxWidth, Math.max(0, offsetX - chart.window_is_moving - border));\n            el.style.borderLeftWidth = borderLeft + 'px';\n\n            let distanceToRightBorder = borderWindowWidth - chart.window_is_moving + border;\n            let borderRight = Math.min(maxWidth, Math.max(0, chart.width - offsetX - distanceToRightBorder));\n            el.style.borderRightWidth = borderRight + 'px';\n\n            chart.windowWasMoved(borderLeft, borderLeft + borderWindowWidth + border * 2);\n        }\n    }\n\n    leftBorderWasMoved(pixel) {\n        let percentile = (pixel - 0) / (this.width - 0), obj = this;\n\n        let minVal = getMinOfArray(this.x), maxVal = getMaxOfArray(this.x);\n        let timestamp = Math.round(minVal + (maxVal - minVal) * percentile), index = 0;\n        while (timestamp > this.x[index]) {\n            index += 1;\n        }\n        this.left_index = index;\n\n        this.eventLeftBorderWasMoved.forEach(function (func, i) {\n            func(index, obj.right_index);\n        });\n    }\n\n    rightBorderWasMoved(pixel) {\n        let percentile = (pixel - 0) / (this.width - 0), obj = this;\n\n        let minVal = this.x[0], maxVal = this.x[this.x.length - 1];\n        let timestamp = Math.round(minVal + (maxVal - minVal) * percentile), index = this.x.length - 1;\n        while (timestamp < this.x[index]) {\n            index -= 1;\n        }\n        this.right_index = index;\n\n        this.eventRightBorderWasMoved.forEach(function (func, i) {\n            func(obj.left_index, index);\n        });\n    }\n\n    windowWasMoved(startPixel, endPixel) {\n        let startPercentile = (startPixel - 0) / (this.width - 0),\n            endPercentile = (endPixel - 0) / (this.width - 0);\n\n        let minVal = this.x[0], maxVal = this.x[this.x.length - 1];\n        let startTimestamp = Math.round(minVal + (maxVal - minVal) * startPercentile);\n        let endTimestamp = Math.round(minVal + (maxVal - minVal) * endPercentile);\n\n        let startIndex = 0, endIndex = this.x.length - 1;\n        while (startTimestamp > this.x[startIndex]) {\n            startIndex += 1;\n        }\n        while (endTimestamp < this.x[endIndex]) {\n            endIndex -= 1;\n        }\n        this.left_index = startIndex;\n        this.right_index = endIndex;\n\n        this.eventWindowWasMoved.forEach(function (func) {\n            func(startIndex, endIndex);\n        });\n    }\n\n    transform_value(yn) {\n        let minY = this.minValue, maxY = this.maxValue;\n        return this.height - ((yn - minY) / (maxY - minY)) * this.height\n    }\n\n    transform_date(xn) {\n        return ((xn - this.x[0]) / (this.x[this.x.length - 1] - this.x[0])) * this.width\n    }\n\n    drawLines(data) {\n        this.data = {};\n        this.visible = {};\n        this.colors = data.colors;\n\n        for (let i = 0; i < data.columns.length; i++) {\n            let id = data.columns[i][0];\n            if (data.types[id] === 'line') {\n                this.data[id] = data.columns[i].slice(1);\n                this.visible[id] = true;\n                this.drawLine(id, true, data.colors[id]);\n            }\n        }\n    }\n\n    updateLine(id) {\n        let polyline = this.g.querySelector('#nav-line-'+ id);\n        polyline.classList.remove(\"invisible\");\n        if (!this.visible[id]) {\n            polyline.classList.add(\"invisible\");\n        }\n    }\n\n    drawLine(id, toDraw, color=null) {\n        let navigator = this;\n        if (!color) {\n            color = this.colorGenerator.getNextColor();\n        }\n\n        let y = this.data[id], points = '';\n        this.x.forEach(function (xn, i) {\n            points += navigator.transform_date(navigator.x[i]) + ',' + navigator.transform_value(y[i]) + ' ';\n        });\n\n        createPolyline(this.g, {\n            'points': points,\n            'fill': 'none',\n            'stroke': color,\n            'stroke-width': '2',\n            'id': 'nav-line-' + id\n        });\n    }\n\n    changeVisible(lineId, isVisible) {\n        this.visible[lineId] = isVisible;\n        this.updateLine(lineId);\n    }\n}","import {ChartMain} from \"./chartmain\";\nimport {ChartNavigation} from \"./chartnav\";\nimport {query} from \"./tools/queries\";\n\nexport class Polychart {\n    constructor(el, width, data) {\n        el.style.width = width + 'px';\n        this.el = el;\n\n        let mainBlock = query('div', {'class': 'chart-main'}, el);\n        this.chart = new ChartMain(mainBlock, data);\n\n        let navigationBlock = query('div', {'class': 'chart-navigation'}, el);\n        this.navigation = new ChartNavigation(navigationBlock,\n            this.chart.x, data,\n            this.chart.min, this.chart.max);\n\n        this.width = width;\n        this.eventsCheckboxWasChanged = [];\n\n        this.onLeftBorderWasMoved(this.chart, this.chart.moveLeft);\n        this.onRightBorderWasMoved(this.chart, this.chart.moveRight);\n        this.onWindowWasMoved(this.chart, this.chart.moveWindow);\n\n        this.createLabels(data, query('div', {'class': 'chart-labels'}, el));\n\n        this.onCheckboxWasChanged(this.chart, this.chart.changeVisible);\n        this.onCheckboxWasChanged(this.navigation, this.navigation.changeVisible);\n\n        let switchDiv = query('div', {'class': 'switch-block'}, el);\n        let switchBtn = query('button', {'class': 'switch-mode'}, switchDiv);\n        switchBtn.innerText = 'Switch to night mode';\n\n        switchBtn.addEventListener('click', function (e) {\n            document.getElementsByTagName('body')[0].classList.toggle('dark');\n        });\n    }\n\n    createLabels(data, el) {\n        let chart = this;\n        for (let name in data.names) {\n            let parentDiv = query('div', {'class': 'checkbox-block'}, el);\n            let roundDiv = query('div', {'class': 'round'}, parentDiv);\n            let input = query('input', {\n                'type': 'checkbox',\n                'checked': 'checked',\n                'value': name,\n                'id': 'checkbox-' + name\n            }, roundDiv);\n\n            query('label', {\n                'class': 'checkbox-container',\n                'for': 'checkbox-' + name,\n                'css': {\n                    'background-color': data.colors[name],\n                    'border-color': data.colors[name]\n                }\n            }, roundDiv);\n            let label = query('label', {'class': 'checkbox-label', 'for': 'checkbox-' + name}, parentDiv);\n            label.innerText = data.names[name];\n\n            input.addEventListener('change', function (e) {\n                let id = e.target.id.replace('checkbox-', '');\n\n                chart.eventsCheckboxWasChanged.forEach(function (func) {\n                    func(id, e.target.checked);\n                });\n            });\n        }\n    }\n\n    onLeftBorderWasMoved(_class, func) {\n        this.navigation.eventLeftBorderWasMoved.push(func.bind(_class));\n    }\n\n    onRightBorderWasMoved(_class, func) {\n        this.navigation.eventRightBorderWasMoved.push(func.bind(_class));\n    }\n\n    onWindowWasMoved(_class, func) {\n        this.navigation.eventWindowWasMoved.push(func.bind(_class));\n    }\n\n    onCheckboxWasChanged(_class, func) {\n        this.eventsCheckboxWasChanged.push(func.bind(_class));\n    }\n}"]}